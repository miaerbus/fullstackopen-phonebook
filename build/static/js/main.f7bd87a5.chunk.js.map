{"version":3,"sources":["components/Person.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Person","person","deleteName","name","number","onClick","window","confirm","id","Persons","persons","map","key","PersonForm","props","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","filteredName","handleFilterChange","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","delete","put","App","useState","setPersons","setNewName","setNewNumber","setFilteredName","notificationMessage","setNotificationMessage","setClassName","useEffect","noteService","personsFiltered","filter","toLowerCase","indexOf","event","target","preventDefault","personObject","some","p","find","updatedPerson","returnedPerson","setTimeout","concat","catch","deletedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7bd87a5.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, deleteName }) => {\n  const deleteConfirm = () => {\n    if (window.confirm(`Do you really want to delete ${person.name}?`)) {\n      deleteName(person.id)\n    }\n  }\n\n  return (\n    <div>\n      {person.name} {person.number}\n      <button onClick={deleteConfirm}>delete</button>\n    </div>\n  )\n}\n\nexport default Person\n","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({ persons, deleteName }) => {\n  return persons.map((person) => (\n    <Person key={person.id} person={person} deleteName={deleteName} />\n  ))\n}\n\nexport default Persons\n","import React from 'react'\n\nconst PersonForm = (props) => (\n  <form onSubmit={props.addName}>\n    <div>\n      name: <input value={props.newName} onChange={props.handleNameChange} />\n    </div>\n    <div>\n      number:{' '}\n      <input value={props.newNumber} onChange={props.handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nexport default PersonForm\n","import React from 'react'\n\nconst Filter = (props) => (\n  <div>\n    filter shown with input{' '}\n    <input value={props.filteredName} onChange={props.handleFilterChange} />\n  </div>\n)\n\nexport default Filter\n","import React from 'react'\n\nconst Notification = ({ message, className }) => {\n  if (message === null) {\n    return null\n  }\n\n  return <div className={className}>{message}</div>\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then((response) => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then((response) => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then((response) => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then((response) => response.data)\n}\n\nexport default { getAll, create, deletePerson, update }\n","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport noteService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filteredName, setFilteredName] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [className, setClassName] = useState('')\n\n  useEffect(() => {\n    noteService.getAll().then((persons) => {\n      setPersons(persons)\n    })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    }\n\n    const personAlreadyExists = persons.some((p) => p.name === newName)\n\n    if (personAlreadyExists) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const person = persons.find((p) => p.name === newName)\n        const updatedPerson = { ...person, number: newNumber }\n\n        noteService.update(person.id, updatedPerson).then((returnedPerson) => {\n          setPersons(\n            persons.map((person) =>\n              person.name !== newName ? person : returnedPerson\n            )\n          )\n          setNewName('')\n          setNewNumber('')\n          setClassName('success')\n          setNotificationMessage(\n            `Updated ${returnedPerson.name}'s phone number`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n      }\n      return\n    }\n\n    noteService.create(personObject).then((returnedPerson) => {\n      setPersons(persons.concat(returnedPerson))\n      setNewName('')\n      setNewNumber('')\n      setClassName('success')\n      setNotificationMessage(`Added ${returnedPerson.name}`)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    })\n  }\n\n  const deleteName = (id) => {\n    noteService\n      .deletePerson(id)\n      .then(() => {\n        setPersons(persons.filter((p) => p.id !== id))\n      })\n      .catch(() => {\n        const deletedPerson = persons.filter((p) => p.id === id)\n        setClassName('error')\n        setNotificationMessage(\n          `${deletedPerson.name} was already deleted from server`\n        )\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n        setPersons(persons.filter((p) => p.id !== id))\n      })\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilteredName(event.target.value)\n  }\n\n  const personsFiltered =\n    filteredName !== ''\n      ? persons.filter(\n          (person) =>\n            person.name.toLowerCase().indexOf(filteredName.toLowerCase()) > -1\n        )\n      : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} className={className} />\n      <Filter\n        filteredName={filteredName}\n        handleFilterChange={handleFilterChange}\n      />\n      <h2>add a new</h2>\n      <PersonForm\n        addName={addName}\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsFiltered} deleteName={deleteName} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}